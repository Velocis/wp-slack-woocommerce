<?php
/**
 * Plugin Name: Velocis Slack WooCommerce
 * Plugin URI: http://velocis.us/products/velocis-wp-slack/
 * Description: This plugin allows you to send notifications to Slack channels whenever a new order arrives.
 * Version: 0.1.0
 * Author: Bradley Joyce \ Velocis 
 * Author URI: http://velocis.us
 * Text Domain: slack
 * Domain Path: /languages
 * License: GPL v2 or later
 * Requires at least: 3.6
 * Tested up to: 4.1
 *
 * This plugin is made possible by the open source work of Akeda Bagus and his Slack WooCommerce plugin
 * http://gedex.web.id/wp-slack/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

/**
 * Adds new event that send notification to Slack channel
 * when a payment is marked as complete.
 *
 * @param  array $events
 * @return array
 *
 * @filter slack_get_events
 */

function wp_slack_woocommerce_new_order( $events ){
	$events['woocommerce_new_order'] = array(

		// Action in WooCommerce to hook in to get the message.
		'action' => 'woocommerce_new_order',

		// Description appears in integration setting.
		'description' => __( 'When a new order is submitted', 'slack' ),

		// Message to deliver to channel. Returns false will prevent
		// notification delivery.
		'message' => function( $order_id ) {
			$wc = $GLOBALS['woocommerce'];

			require_once $wc->plugin_path() . '/includes/class-wc-order.php';
			$order = new WC_Order( $order_id );

			$date = $order->completed_date;
			$url  = add_query_arg(
				array(
					'post'   => $order_id,
					'action' => 'edit',
				),
				admin_url( 'post.php' )
			);

			if ( $order->user_id ) {
				$user_info = get_userdata( $order->user_id );
			}

			if ( ! empty( $user_info ) ) {
				if ( $user_info->first_name || $user_info->last_name ) {
					$username = esc_html( ucfirst( $user_info->first_name ) . ' ' . ucfirst( $user_info->last_name ) );
				} else {
					$username = esc_html( ucfirst( $user_info->display_name ) );
				}
			} else {
				if ( $order->billing_first_name || $order->billing_last_name ) {
					$username = trim( $order->billing_first_name . ' ' . $order->billing_last_name );
				} else {
					$username = __( 'Guest', 'woocommerce' );
				}
			}

			// Remove HTML tags generated by WooCommerce.
			add_filter( 'woocommerce_get_formatted_order_total', 'wp_strip_all_tags', 10, 1 );
			$total = html_entity_decode( $order->get_formatted_order_total() );
			remove_filter( 'woocommerce_get_formatted_order_total', 'wp_strip_all_tags', 10 );

			// Returns the message to be delivered to Slack.
			return apply_filters( 'slack_woocommerce_new_order_message',
				sprintf(
					__( 'New order with amount *%s* has been made by *%s* on *%s*. <%s|See detail>', 'slack' ),

					$total,
					$username,
					$date,
					$url
				),

				$order
			);
		}
	);

	return $events;
}
add_filter( 'slack_get_events', 'wp_slack_woocommerce_new_order' );